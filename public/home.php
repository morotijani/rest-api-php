<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>MY API</title>
</head>
<body style="font-family: verdana;">
	<center>
		<h1>My API</h1>
		<h3>Documentation</h3>

		<p>// first item in the url is always the table name</p>

		Signature: This is generated by creating a hash of the header and payload, combined with a secret key typically generated as either 256 bits or 32 bytes. By convention, the secret key matches the size of the hash output.
		<br>
		<br>
		You will have to use the link below to generate a secret key we need for this project:
		https://generate-random.org/encryption-key-generator?source=post_page-----ebf5693b931a--------------------------------
		<br>
		<br>
		SECRET_KEY=
		<br>
		<br>
		the secret key used to sign the token should be kept hidden and never exposed to public information, as it can compromise the security of the system.
		<br>
		<br>
		Provide database details in the .env file
		<br>
		<br>
		The implementation of access tokens and refresh tokens enhances security and user experience. Access tokens provide immediate access to resources and have a short lifespan(20 secs), promoting security by limiting their usability in case of unauthorized access. On the other hand, refresh tokens (5 days) have a longer lifespan and enable users to obtain new access tokens without repeated authentication
		<br>
		<br>
		Login with user api username and password to generate token key
		<br>
		<br>
		use refresh tokens as your Authorization Bearer Token
		<br>
		<br>
		Token, expires in every 5 days
		
		<br>
		<br><br>
		<br>
		When a user logs in via the login endpoint, two crucial tokens are provided: an access token and a refresh token. The access token grants immediate access to resources, while the refresh token serves as a long-term authorization tool. If the access token expires, the refresh token is then passed to the refresh endpoint. This action triggers the generation of a new access token, which, in turn, creates a fresh refresh token. This process forms a robust and secure mechanism ensuring continuous access to resources while maintaining high levels of security and user convenience



	</center>
</body>
</html>